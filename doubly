#include<iostream>
using namespace std;

class node
{

public:
	int data;

	node* next;

	node* prev;

};


class Doubly
{

	node* head;

public:
	Doubly()
	{

		head = nullptr;

	}
	void SortedInsert(int n)
	{

		node* newnode = new node;

		newnode->data = n;


		if (head == nullptr)
		{

			newnode->next = nullptr;

			newnode->prev = nullptr;

			head = newnode;

		}

		else if (n < head->data)
		{


			newnode->next = head;

			head = newnode;

		}

		else
		{

			node* itr = head;

			while (itr->next != nullptr)

			{

				if (itr->data < n && itr->next->data > n)

				{

					newnode->next = itr->next;

					newnode->prev = itr;

					newnode->next->prev = itr->next;

					itr->next = newnode;

					break;

				}



				itr = itr->next;

			}
			if (itr->next == nullptr)
			{

				itr->next = newnode;

				newnode->prev = itr;



			}

		}

	}

	void triplet(int sum) {
	    int count=0;
		node* itr1 = head;
		node* itr2;
		node* itr3 = head;
		while (itr1->next!=nullptr)
		{
			itr2 = itr1;
			while (itr2->next != nullptr)
			{
				itr3 = itr2;
				while (itr3->next != nullptr)
				{
					if (itr1->data + itr2->data + itr3->data == sum) {
					count  ++;
					cout<<endl<<"count"<<count;
						cout <<endl<< itr1->data << ", " << itr2->data << ", " << itr3->data << endl;
					}
					itr3 = itr3->next;
				}
				itr2 = itr2->next;
			}
			itr1 = itr1->next;
		}

	}
	void printList()
	{

		node* temp = head;

		while (temp != NULL)
		{

			cout << temp->data << " ";

			temp = temp->next;

		}

	}

};


int
main()
{


	Doubly d;

	d.SortedInsert(5);

	d.SortedInsert(4);

	d.SortedInsert(7);

	d.SortedInsert(1);

	d.SortedInsert(2);

	d.SortedInsert(6);

	d.SortedInsert(3);

	d.printList();
	d.triplet(7);
	system("pause");

	return 0;



}
